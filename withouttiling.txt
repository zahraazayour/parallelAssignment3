#include <stdio.h>

#define M 16
#define N 16
#define K 16

__global__ void matrixMul(int* A, int* B, int* C, int m, int n, int k) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    if (row < m && col < n) {
        int sum = 0;
        for (int i = 0; i < k; ++i) {
            sum += A[row * k + i] * B[i * n + col];
        }
        C[row * n + col] = sum;
    }
}

int main() {
    int A[M][K], B[K][N], C[M][N];
    int *devA, *devB, *devC;

    // Initialize matrices A and B
    // ...

    // Allocate device memory
    cudaMalloc((void**)&devA, M * K * sizeof(int));
    cudaMalloc((void**)&devB, K * N * sizeof(int));
    cudaMalloc((void**)&devC, M * N * sizeof(int));

    // Copy input matrices from host to device
    cudaMemcpy(devA, A, M * K * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(devB, B, K * N * sizeof(int), cudaMemcpyHostToDevice);

    // Launch kernel
    dim3 threadsPerBlock(16, 16);
    dim3 numBlocks((N + threadsPerBlock.x - 1) / threadsPerBlock.x, (M + threadsPerBlock.y - 1) / threadsPerBlock.y);
    matrixMul<<<numBlocks, threadsPerBlock>>>(devA, devB, devC, M, N, K);

    // Copy result matrix from device to host
    cudaMemcpy(C, devC, M * N * sizeof(int), cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(devA);
    cudaFree(devB);
    cudaFree(devC);

    // Print result matrix
    for (int i = 0; i < M; ++i) {
        for (int j = 0; j < N; ++j) {
            printf("%d ", C[i][j]);
        }
        printf("\n");
    }

    return 0;
}
